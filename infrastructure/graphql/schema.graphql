type Data {
  pk: ID!
  createdAt: String!
  userId: String!
  accountId: ID!
  entity: String!
  category: String!
  type: String
  name: String
  transactionDate: AWSDate
  symbol: String
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
  bookValue: Float
  marketValue: Float
  acb: Float
  payee: String
  amount: Float
  updatedAt: AWSDateTime!
}

# CreateAccount
input CreateAccountInput {
  type: String!
  category: String!
  name: String!
}

# UpdateAccount
input UpdateAccountInput {
  accountId: ID!
  createdAt: String!
  category: String!
  type: String!
  name: String!
}

# CreateTransaction
input CreateTransactionInput {
  accountId: ID!
  type: String!
  transactionDate: AWSDate!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
}

input UpdateTransactionInput {
  pk: String!
  createdAt: String!
  type: String!
  transactionDate: AWSDate!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
}

input DeleteTransactionInput {
  pk: ID!
  createdAt: String!
  symbol: String!
}

# Aggregate Response
type Aggregates {
  items: [Data]
}

# Account entity
type Account {
  pk: ID!
  createdAt: String!
  accountId: ID!
  entity: String!
  category: String!
  type: String!
  name: String!
  userId: String!
  updatedAt: AWSDateTime!
}

# Transaction entity
type Transaction {
  pk: ID!
  createdAt: String!
  userId: String!
  entity: String!
  accountId: ID!
  type: String!
  transactionDate: AWSDate!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
  updatedAt: AWSDateTime!
}

# Position entity
type Position {
  pk: ID!
  createdAt: String!
  userId: String!
  entity: String!
  accountId: ID!
  description: String!
  symbol: String!
  shares: Float!
  exchange: String!
  currency: String!
  bookValue: Float!
  marketValue: Float!
  acb: Float!
  updatedAt: AWSDateTime!
}

type GetAccountsResponse {
  items: [Account]
  nextToken: String
}

type GetTransactionsResponse {
  items: [Transaction]
  nextToken: String
}

type GetPositionsResponse {
  items: [Position]
  nextToken: String
}

type DeleteResponse {
  aggregateId: String
}

# GraphQL actions
type Query {
  getAccount(accountId: String!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  getAccounts(lastEvaluatedKey: String): GetAccountsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  getAggregate(accountId: String!, type: String): Aggregates @aws_cognito_user_pools(cognito_groups: ["Users"])

  getTransactions(accountId: String!, lastEvaluatedKey: String): GetTransactionsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  getPositions(accountId: String!, lastEvaluatedKey: String): GetPositionsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateAccount(input: UpdateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteAggregate(accountId: String!): Aggregates @aws_cognito_user_pools(cognito_groups: ["Users"])

  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteTransaction(deleteTransactionInput: DeleteTransactionInput!): DeleteResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
}

schema {
  query: Query
  mutation: Mutation
}

# input LastEvaluatedKey {
#   userId: ID
#   sk: String
# }

# input TransactionLastEvaluatedKey {
#   userId: ID
#   sk: String
#   aggregateId: ID
#   transactionDate: AWSDate
# }

# type GetAccountsResponse {
#   items: [AccountReadModel]
#   lastEvaluatedKey: LastEvaluatedKeyResponse
# }

# type LastEvaluatedKeyResponse {
#   userId: ID
#   sk: String
# }

# type AccountReadModel {
#   userId: ID
#   sk: String
#   createdAt: AWSDateTime
#   updatedAt: AWSDateTime
#   aggregateId: ID
#   entity: String
#   type: String
#   name: String
#   description: String
#   currencies: [Currency]
#   acb: Float
#   payee: String
#   amount: Float
# }

# type TransactionLastEvaluatedKeyResponse {
#   userId: ID
#   sk: String
#   aggregateId: ID
#   transactionDate: AWSDate
# }

# type TransactionReadModel {
#   userId: ID
#   sk: String
#   createdAt: AWSDateTime
#   updatedAt: AWSDateTime
#   aggregateId: ID
#   entity: String
#   type: String
#   transactionDate: AWSDate
#   symbol: String
#   shares: Float
#   price: Float
#   commission: Float
# }

# type Currency {
#   currency: String
#   bookValue: Float
#   marketValue: Float
# }
