scalar AWSDateTime

# Event Store
type Event @model {
  id: ID!
  aggregateId: ID!
  name: String!
  version: Int!
  data: String!
  userId: ID!
  timestamp: AWSDateTime!
}

# Lookup Types
type AccountType @model {
  id: ID!
  name: String!
  description: String
  accounts: [AccountReadModel]! @connection(name: "AccountType")
}

type TransactionType @model {
  id: ID!
  name: String!
  description: String!
  transactions: [TransactionReadModel] @connection(name: "TransactionTypes")
}

type CurrencyType @model {
  id: ID!
  name: String!
  description: String!
  exchangeTypes: [ExchangeType]! @connection(name: "ExchangeCurrencyTypes")
}

type ExchangeType @model {
  id: ID!
  name: String!
  description: String!
  currencyType: CurrencyType! @connection(name: "ExchangeCurrencyTypes")
}

# Read Store
type AccountReadModel @model {
  id: ID!
  aggregateId: ID!
  version: Int!
  userId: ID!
  name: String!
  description: String
  createdDate: AWSDateTime!
  accountType: AccountType! @connection(name: "AccountType")
  transactions: [TransactionReadModel] @connection(name: "Transactions")
}

type TransactionReadModel @model {
  id: ID!
  aggregateId: ID!
  version: Int!
  userId: ID!
  transactionDate: AWSDate!
  shares: Int!
  price: Float!
  commission: Float!
  symbol: String!
  createdDate: AWSDateTime!
  account: AccountReadModel! @connection(name: "Transactions")
  transactionType: TransactionType! @connection(name: "TransactionTypes")
}

# type SecurityReadModel @model {
#   id: ID!
#   name: String!
#   description: String!
#   userId: ID!
#   transactions: [Transaction] @connection(name: "TransactionSecurities")
#   exchangeType: ExchangeType @connection(name: "SecurityExchangeTypes")
# }
