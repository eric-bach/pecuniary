name: test

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - ready_for_review
      - synchronize

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: ⚒️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 👀 Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: 📥 Install Backend and Sources
        uses: ./.github/actions/backend

      - name: 🚧 Build AppSync
        run: |
          npm run build-appsync
        working-directory: backend

      - name: 🔭 Run CDK Unit Tests
        run: npm run test
        working-directory: backend

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: ⚒️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 👀 Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      # Should not need to deploy to run tests
      # - name: 📥 Install CDK Dependencies
      #   run: npm install
      #   working-directory: infrastructure

      - name: 📥 Install Frontend
        uses: ./.github/actions/frontend

      # TODO Once there are Cypress frontend tests
      # - name: Run Cypress Frontend Tests
      #   run: npx cypress run --env username=${{ secrets.CYPRESS_USERNAME }},password=${{ secrets.CYPRESS_PASSWORD }}
      #   working-directory: frontend

  deploy-dev:
    name: Deploy Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: [unit-tests, integration-tests]
    permissions:
      actions: write
      contents: read
      id-token: write

    steps:
      - name: 🚫 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: ⚒️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_SERVICE_ROLE_ARN }}
          aws-region: us-east-1

      - name: 👀 Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: 📥  Install Backend and Sources
        uses: ./.github/actions/backend

      - name: 📥 Install Frontend
        uses: ./.github/actions/frontend

      - name: 🗒️ Create Frontend .env
        run: |
          touch .env
          echo NEXT_PUBLIC_USER_POOL_ID=${{ secrets.USER_POOL_ID }} >> .env
          echo NEXT_PUBLIC_USER_POOL_CLIENT_ID=${{ secrets.USER_POOL_CLIENT_ID }} >> .env
          echo NEXT_PUBLIC_APPSYNC_API_ENDPOINT=${{ secrets.APPSYNC_API_ENDPOINT }} >> .env
          echo NEXT_PUBLIC_APPSYNC_REGION=${{ secrets.REGION }} >> .env
        working-directory: frontend

      - name: 🏗 Build Frontend
        run: npm run build-frontend
        working-directory: backend

      - name: 🗒️ Create Backend .env
        run: |
          touch .env
          echo DLQ_NOTIFICATIONS=${{ secrets.DLQ_NOTIFICATIONS }} >> .env
        working-directory: backend

      - name: 🚧 Build AppSync
        run: |
          npm run build-appsync
        working-directory: backend

      - name: 🚧 Build Backend
        run: |
          find ./src/lambda -mindepth 2 -maxdepth 2 -type f -name 'package.json' |
          while IFS= read -r file; do
            echo "🚧 Building $file"
            cd "$(dirname "$file")"
            npm run build
            cd - >/dev/null
          done
        working-directory: backend

      - name: 🚀 Deploy Backend
        run: |
          echo "🚀 Deploying backend dev"
          npm run cdk -- deploy --all -c stage=backend -c env=dev --require-approval=never
        working-directory: backend

      # TODO Once SST setup to deploy frontend
      # - name: 🚀 Deploy Frontend
      #   run: npx sst deploy --stage dev
      #   working-directory: frontend
