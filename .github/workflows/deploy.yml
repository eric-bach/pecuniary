name: deploy

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_SERVICE_ROLE_PROD }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}

      - name: Install Backend Dependencies
        run: npm run cinstall-all-backend
        working-directory: backend

      - name: Create backend/.env file
        run: |
          touch .env
          echo CERTIFICATE_ARN=${{ secrets.CERTIFICATE_ARN }} >> .env
          echo DLQ_NOTIFICATIONS=${{ secrets.DLQ_NOTIFICATIONS }} >> .env
          cat .env
        working-directory: backend

      - name: CDK Deploy Backend
        run: npm run deploy-backend prod
        env:
          CERTIFICATE_ARN: ${{secrets.CERTIFICATE_ARN}}
          DLQ_NOTIFICATIONS: ${{secrets.DLQ_NOTIFICATIONS}}
        working-directory: backend

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      actions: write
      contents: read
      id-token: write

    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: ⎔ Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: 👀 Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_SERVICE_ROLE_PROD }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}

      - name: 📥 Install Dependencies
        run: npm run ci
        working-directory: client

      - name: 🛠 Install Arc
        run: npm -g add @architect/architect

      - name: Create client/app/aws-exports.js file
        run: |
          touch aws-exports.js
          echo const awsmobile = { aws_project_region: \'${{ secrets.CDK_DEFAULT_REGION }}\', aws_cognito_region: \'${{ secrets.CDK_DEFAULT_REGION }}\', aws_user_pools_id: \'${{secrets.COGNITO_USERPOOL_ID_PROD}}\', aws_user_pools_web_client_id: \'${{ secrets.COGNITO_WEB_CLIENT_ID_PROD }}\', mandatorySignIn: true, aws_appsync_graphqlEndpoint: \'${{ secrets.GRAPHQL_ENDPOINT_PROD }}\', aws_appsync_region: \'${{ secrets.CDK_DEFAULT_REGION }}\', aws_appsync_authenticationType: \'AMAZON_COGNITO_USER_POOLS\' } >> aws-exports.js
          echo export default awsmobile >> aws-exports.js
          cat aws-exports.js
        working-directory: client/app

      - name: 🏗 Build Frontend
        run: npm run build
        working-directory: client

      - name: 🚀 ARC Deploy Client
        if: github.ref == 'refs/heads/main'
        run: arc deploy --production --prune
        env:
          CI: true

      - name: 🚀 CDK Deploy Client
        run: npm run deploy prod
        env:
          CERTIFICATE_ARN: ${{secrets.CERTIFICATE_ARN}}
          DLQ_NOTIFICATIONS: ${{secrets.DLQ_NOTIFICATIONS}}
        working-directory: client

  deploy-mfe-frontend:
    name: Deploy MFE Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      actions: write
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_SERVICE_ROLE_PROD }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}

      - name: Install Dependencies
        run: npm run cinstall-all
        working-directory: backend

      - name: Create frontend/container/.env file
        run: |
          touch .env
          echo PRODUCTION_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN_PROD }} >> .env
          echo REACT_APP_COGNITO_USERPOOL_ID=${{ secrets.COGNITO_USERPOOL_ID_PROD }} >> .env
          echo REACT_APP_COGNITO_CLIENT_ID=${{ secrets.COGNITO_WEB_CLIENT_ID_PROD }} >> .env
          echo REACT_APP_APPSYNC_ENDPOINT=${{ secrets.APPSYNC_ENDPOINT_PROD }} >> .env
          echo REACT_APP_APPSYNC_REGION=${{ secrets.CDK_DEFAULT_REGION }} >> .env
          cat .env
        working-directory: frontend/container

      - name: Build Frontend
        run: npm run build-all-frontend
        working-directory: backend

      - name: CDK Deploy Frontend
        run: npm run deploy-frontend prod
        env:
          CERTIFICATE_ARN: ${{secrets.CERTIFICATE_ARN}}
          DLQ_NOTIFICATIONS: ${{secrets.DLQ_NOTIFICATIONS}}
        working-directory: backend
