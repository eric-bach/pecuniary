type Data @model @aws_cognito_user_pools(cognito_groups: ["Users"]) {
  pk: ID!
  createdAt: String!
  userId: String!
  accountId: ID!
  entity: String!
  type: String
  name: String
  transactionDate: AWSDate
  symbol: String
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
  bookValue: Float
  marketValue: Float
  acb: Float
  payee: String
  amount: Float
  updatedAt: AWSDateTime!
}

# CreateAccount
input CreateAccountInput {
  type: String!
  name: String!
}

# UpdateAccount
input UpdateAccountInput {
  pk: ID!
  createdAt: String!
  type: String!
  name: String!
}

# Account entity
type Account {
  pk: ID!
  createdAt: String!
  accountId: ID!
  entity: String!
  type: String!
  name: String!
  userId: String!
  updatedAt: AWSDateTime!
}

# GraphQL actions
type Query {
  getAccount(accountId: String!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  getAccounts: [Account] @aws_cognito_user_pools(cognito_groups: ["Users"])

  getAggregate(accountId: String!, type: String): [Data] @aws_cognito_user_pools(cognito_groups: ["Users"])

  # getTransactions(userId: String!, aggregateId: String!, lastEvaluatedKey: TransactionLastEvaluatedKey): GetTransactionsResponse
  #   @aws_cognito_user_pools(cognito_groups: ["Users"])
  # getPositions(userId: String!, aggregateId: String!): [Data] @aws_cognito_user_pools(cognito_groups: ["Users"])
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateAccount(input: UpdateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])

  deleteAggregate(accountId: String!): [Data] @aws_cognito_user_pools(cognito_groups: ["Users"])

  # createTransaction(createTransactionInput: CreateTransactionInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  # updateTransaction(updateTransactionInput: UpdateTransactionInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  # deleteTransaction(deleteTransactionInput: DeleteTransactionInput!): DeleteResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
}

schema {
  query: Query
  mutation: Mutation
}

# input UpdateAccountInput {
#   userId: ID!
#   sk: String!
#   type: String!
#   name: String!
#   description: String!
# }

# input DeleteAccountInput {
#   userId: ID!
#   aggregateId: ID!
# }

# input CreateTransactionInput {
#   userId: ID!
#   aggregateId: ID!
#   type: String!
#   transactionDate: AWSDate!
#   symbol: String!
#   shares: Float!
#   price: Float!
#   commission: Float!
# }

# input UpdateTransactionInput {
#   userId: ID!
#   sk: String!
#   aggregateId: String!
#   type: String!
#   transactionDate: AWSDate!
#   symbol: String!
#   shares: Float!
#   price: Float!
#   commission: Float!
# }

# input DeleteTransactionInput {
#   userId: ID!
#   sk: String!
#   aggregateId: ID!
#   symbol: String!
# }

# type DeleteResponse {
#   userId: ID
#   aggregateId: String
# }

# input LastEvaluatedKey {
#   userId: ID
#   sk: String
# }

# input TransactionLastEvaluatedKey {
#   userId: ID
#   sk: String
#   aggregateId: ID
#   transactionDate: AWSDate
# }

# type GetAccountsResponse {
#   items: [AccountReadModel]
#   lastEvaluatedKey: LastEvaluatedKeyResponse
# }

# type LastEvaluatedKeyResponse {
#   userId: ID
#   sk: String
# }

# type AccountReadModel {
#   userId: ID
#   sk: String
#   createdAt: AWSDateTime
#   updatedAt: AWSDateTime
#   aggregateId: ID
#   entity: String
#   type: String
#   name: String
#   description: String
#   currencies: [Currency]
#   acb: Float
#   payee: String
#   amount: Float
# }

# type GetTransactionsResponse {
#   items: [TransactionReadModel]
#   lastEvaluatedKey: TransactionLastEvaluatedKeyResponse
# }

# type TransactionLastEvaluatedKeyResponse {
#   userId: ID
#   sk: String
#   aggregateId: ID
#   transactionDate: AWSDate
# }

# type TransactionReadModel {
#   userId: ID
#   sk: String
#   createdAt: AWSDateTime
#   updatedAt: AWSDateTime
#   aggregateId: ID
#   entity: String
#   type: String
#   transactionDate: AWSDate
#   symbol: String
#   shares: Float
#   price: Float
#   commission: Float
# }

# type Currency {
#   currency: String
#   bookValue: Float
#   marketValue: Float
# }
