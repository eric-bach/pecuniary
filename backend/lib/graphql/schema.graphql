schema {
  query: Query
  mutation: Mutation
}

type Data @model @aws_cognito_user_pools {
  userId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  aggregateId: ID
  entity: String
  type: String
  name: String
  description: String
  transactionDate: AWSDate
  symbol: String
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
  bookValue: Float
  marketValue: Float
  acb: Float
  payee: String
  amount: Float
}

type TimeSeries @model @aws_cognito_user_pools {
  symbol: String!
  date: AWSDate!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
  adjusted_close: Float!
  volume: Int!
  split_coefficient: Float!
}

input CreateAccountInput {
  userId: ID!
  type: String
  name: String
  description: String
}

input UpdateAccountInput {
  userId: ID!
  aggregateId: ID!
  type: String
  name: String
  description: String
}

input DeleteAccountInput {
  userId: ID!
  aggregateId: ID!
}

input CreateTransactionInput {
  userId: ID!
  aggregateId: ID!
  type: String
  transactionDate: AWSDate
  symbol: String
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
}

input UpdateTransactionInput {
  userId: ID!
  createdAt: AWSDateTime!
  aggregateId: ID!
  type: String
  transactionDate: AWSDate
  symbol: String!
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
}

input DeleteTransactionInput {
  userId: ID!
  createdAt: AWSDateTime!
  aggregateId: ID!
}

type DeleteResponse {
  aggregateId: String
}

# GraphQL actions
type Query {
  getAccounts(userId: String!): [Data] @aws_cognito_user_pools(cognito_groups: ["Users"])
  getTransactions(userId: String!, aggregateId: String!): [Data] @aws_cognito_user_pools(cognito_groups: ["Users"])
}

type Mutation {
  createAccount(createAccountInput: CreateAccountInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateAccount(updateAccountInput: UpdateAccountInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteAccount(deleteAccountInput: DeleteAccountInput!): DeleteResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  createTransaction(createTransactionInput: CreateTransactionInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Data @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteTransaction(deleteTransactionInput: DeleteTransactionInput!): DeleteResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
}
