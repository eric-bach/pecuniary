type Data {
  pk: ID!
  userId: String!
  accountId: ID!
  entity: String!
  category: String
  type: String
  name: String
  transactionDate: AWSDate
  symbol: String
  shares: Float
  price: Float
  commission: Float
  exchange: String
  currency: String
  balance: Float
  bookValue: Float
  marketValue: Float
  payee: String
  amount: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# CreateAccount
input CreateAccountInput {
  name: String!
  type: String!
  category: String!
}

# UpdateAccount
input UpdateAccountInput {
  accountId: ID!
  name: String!
  type: String!
  category: String!
}

# CreateBankTransaction
input CreateBankTransactionInput {
  accountId: ID!
  transactionDate: AWSDate!
  payee: String!
  category: String
  amount: Float!
}

input UpdateBankTransactionInput {
  accountId: ID!
  transactionId: ID!
  transactionDate: AWSDate!
  payee: String!
  category: String
  amount: Float!
}

input DeleteBankTransactionInput {
  pk: ID!
}

# CreateInvestmentTransaction
input CreateInvestmentTransactionInput {
  accountId: ID!
  transactionDate: AWSDate!
  type: String!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
}

input UpdateInvestmentTransactionInput {
  accountId: ID!
  transactionId: ID!
  transactionDate: AWSDate!
  type: String!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
}

input DeleteInvestmentTransactionInput {
  pk: ID!
}

# Aggregate Response
type Aggregates {
  items: [Data]
}

# Account entity
type Account {
  pk: ID!
  accountId: ID!
  entity: String!
  category: String!
  type: String!
  name: String!
  balance: Float!
  bookValue: Float!
  marketValue: Float!
  userId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

#  Transaction entity
type BankTransaction {
  pk: ID!
  entity: String!
  accountId: ID!
  transactionId: ID!
  transactionDate: AWSDate!
  payee: String!
  category: String
  amount: Float!
  userId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type InvestmentTransaction {
  pk: ID!
  entity: String!
  accountId: ID!
  transactionId: ID!
  transactionDate: AWSDate!
  type: String!
  symbol: String!
  shares: Float!
  price: Float!
  commission: Float!
  userId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Position entity
type Position {
  pk: ID!
  entity: String!
  accountId: ID!
  postiionId: ID!
  description: String!
  symbol: String!
  shares: Float!
  exchange: String!
  currency: String!
  bookValue: Float!
  marketValue: Float!
  userId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Category entity
type Category {
  pk: ID!
  name: String!
  entity: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Payee entity
type Payee {
  pk: ID!
  name: String!
  entity: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Symbol entity
type Symbol {
  pk: ID!
  name: String!
  entity: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GetAccountsResponse {
  items: [Account]
  nextToken: String
}

type GetBankTransactionsResponse {
  items: [BankTransaction]
  nextToken: String
}

type GetInvestmentTransactionsResponse {
  items: [InvestmentTransaction]
  nextToken: String
}

type GetPositionsResponse {
  items: [Position]
  nextToken: String
}

type DeleteTransaction {
  pk: String
}

type GetCategoriesResponse {
  items: [Category]
  nextToken: String
}

type GetPayeesResponse {
  items: [Payee]
  nextToken: String
}

type GetSymbolsResponse {
  items: [Symbol]
  nextToken: String
}

# GraphQL actions
type Query {
  getAccount(accountId: String!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  getAccounts(lastEvaluatedKey: String): GetAccountsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  getAggregate(accountId: String!, type: String): Aggregates @aws_cognito_user_pools(cognito_groups: ["Users"])

  getBankTransactions(accountId: String!, lastEvaluatedKey: String): GetBankTransactionsResponse
    @aws_cognito_user_pools(cognito_groups: ["Users"])
  getInvestmentTransactions(accountId: String!, lastEvaluatedKey: String): GetInvestmentTransactionsResponse
    @aws_cognito_user_pools(cognito_groups: ["Users"])
  getPositions(accountId: String!, lastEvaluatedKey: String): GetPositionsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])

  getCategories(lastEvaluatedKey: String): GetCategoriesResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  getPayees(lastEvaluatedKey: String): GetPayeesResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
  getSymbols(lastEvaluatedKey: String): GetSymbolsResponse @aws_cognito_user_pools(cognito_groups: ["Users"])
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateAccount(input: UpdateAccountInput!): Account @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteAccount(accountId: String!): Aggregates @aws_cognito_user_pools(cognito_groups: ["Users"])

  createCategory(name: String!): Category @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateCategory(name: String!, pk: String!): Category @aws_cognito_user_pools(cognito_groups: ["Users"])
  createPayee(name: String!): Payee @aws_cognito_user_pools(cognito_groups: ["Users"])
  updatePayee(name: String!, pk: String!): Payee @aws_cognito_user_pools(cognito_groups: ["Users"])
  createSymbol(name: String!): Symbol @aws_cognito_user_pools(cognito_groups: ["Users"])

  createBankTransaction(input: CreateBankTransactionInput!): BankTransaction @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateBankTransaction(input: UpdateBankTransactionInput!): BankTransaction @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteBankTransaction(input: DeleteBankTransactionInput!): DeleteTransaction @aws_cognito_user_pools(cognito_groups: ["Users"])
  createInvestmentTransaction(input: CreateInvestmentTransactionInput!): InvestmentTransaction
    @aws_cognito_user_pools(cognito_groups: ["Users"])
  updateInvestmentTransaction(input: UpdateInvestmentTransactionInput!): InvestmentTransaction
    @aws_cognito_user_pools(cognito_groups: ["Users"])
  deleteInvestmentTransaction(input: DeleteInvestmentTransactionInput!): DeleteTransaction
    @aws_cognito_user_pools(cognito_groups: ["Users"])
}

schema {
  query: Query
  mutation: Mutation
}
