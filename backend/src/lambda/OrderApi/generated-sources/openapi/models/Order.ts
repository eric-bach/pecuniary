/* tslint:disable */
/* eslint-disable */
/**
 * Order API
 * Use this API to handle create orders from frontend 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import type { Contact } from './Contact';
import {
    ContactFromJSON, ContactToJSON
} from './Contact';
import type { DeliveryAddress } from './DeliveryAddress';
import {
    DeliveryAddressFromJSON, DeliveryAddressToJSON
} from './DeliveryAddress';
import type { Product } from './Product';
import {
    ProductFromJSON, ProductToJSON
} from './Product';

/**
 * Order information
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * 
     * @type {Contact}
     * @memberof Order
     */
    contact?: Contact;
    /**
     * 
     * @type {DeliveryAddress}
     * @memberof Order
     */
    deliveryAddress?: DeliveryAddress;
    /**
     * Product selection
     * @type {Array<Product>}
     * @memberof Order
     */
    products?: Array<Product>;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'contact': !exists(json, 'contact') ? undefined : ContactFromJSON(json['contact']),
        'deliveryAddress': !exists(json, 'delivery_address') ? undefined : DeliveryAddressFromJSON(json['delivery_address']),
        'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(ProductFromJSON)),
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'contact': ContactToJSON(value.contact),
        'delivery_address': DeliveryAddressToJSON(value.deliveryAddress),
        'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(ProductToJSON)),
    };
}

